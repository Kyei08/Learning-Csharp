
Explanation and Practical Scenarios:

Array Declaration and Initialization:

Arrays are used to store collections of elements of the same data type.
int[] numbers = new int[5]; declares an integer array with 5 elements.
string[] names = { "Alice", "Bob", "Charlie", "David" }; shows a quicker way to initialize an array when you know the values beforehand.
Practical Use: Storing a list of student IDs, product prices, or daily temperature readings.
Accessing Array Elements:

Array elements are accessed using their index, starting from 0.
Practical Use: Retrieving the score of a specific student or the price of a particular item.
Array Length:

The Length property gives you the number of elements in an array.
Practical Use: Controlling loop iterations or validating input.
Looping through an Array (for and foreach):

for loops are used when you need to access elements by index.
foreach loops are simpler for iterating through all elements.
Practical Use: Processing all items in a shopping cart or calculating the average of a set of numbers.
Multidimensional Arrays:

Used to represent tables or grids.
int[,] matrix creates a 2D array.
Practical Use: Representing game boards, spreadsheet data, or image pixels.
Array methods:

C# provides many useful array methods within the Array class.
Array.Sort() sorts the array.
Array.IndexOf() finds the index of a specified element.
Array.Reverse() reverses the array.
Practical Use: Sorting a list of high scores, searching for a specific record, or reversing the order of a queue.





